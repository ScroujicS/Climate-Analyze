import pandas as pd
from flask import Flask, render_template_string
import dash
from dash import dcc, html, Input, Output
import plotly.express as px
from request import update_csv_with_weather_data

update_csv_with_weather_data()

# –ß—Ç–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–∞ —Å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
df = pd.read_csv("mock_climate_data.csv")
df['timestamp'] = pd.to_datetime(df['timestamp'])

# –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
server = Flask(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–æ Flask
app = dash.Dash(__name__, server=server, url_base_pathname='/dashboard/')

# –ú–∞–∫–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Dash
app.layout = html.Div([
    html.H1("üå¶ –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥", style={"textAlign": "center"}),

    html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"),
    dcc.Dropdown(
        options=[{"label": city, "value": city} for city in df["city"].unique()],
        value=df["city"].unique()[0],
        id="city-dropdown"
    ),

    html.Div(id="graphs-output")
])

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞
@app.callback(
    Output("graphs-output", "children"),
    Input("city-dropdown", "value")
)
def update_graphs(selected_city):
    filtered_df = df[df["city"] == selected_city]

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    fig_temp = px.line(
        filtered_df,
        x="timestamp",
        y="temperature",
        title="üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        labels={"timestamp": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)"},
        markers=True,
        line_shape="spline"
    )
    fig_temp.update_traces(line=dict(color='orangered'))

    # –û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    fig_feels = px.line(
        filtered_df,
        x="timestamp",
        y="feels_like",
        title="üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ (¬∞C)",
        labels={"timestamp": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "feels_like": "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ (¬∞C)"},
        markers=True,
        line_shape="spline"
    )
    fig_feels.update_traces(line=dict(color='orange'))

    # –í–ª–∞–∂–Ω–æ—Å—Ç—å
    fig_hum = px.line(
        filtered_df,
        x="timestamp",
        y="humidity",
        title="üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
        labels={"timestamp": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)"},
        markers=True,
        line_shape="spline"
    )
    fig_hum.update_traces(line=dict(color='dodgerblue'))

    # –î–∞–≤–ª–µ–Ω–∏–µ
    fig_pressure = px.line(
        filtered_df,
        x="timestamp",
        y="pressure",
        title="üß≠ –î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)",
        labels={"timestamp": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)"},
        markers=True,
        line_shape="spline"
    )
    fig_pressure.update_traces(line=dict(color='darkgreen'))

    # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
    fig_wind = px.line(
        filtered_df,
        x="timestamp",
        y="wind_speed",
        title="üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
        labels={"timestamp": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "wind_speed": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)"},
        markers=True,
        line_shape="spline"
    )
    fig_wind.update_traces(line=dict(color='purple'))

    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    latest = filtered_df.sort_values("timestamp").iloc[-1]
    description = latest["weather_description"].capitalize()
    weather_text = html.H3(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –≤ {selected_city}: {description}", style={"textAlign": "center"})

    return [
        weather_text,
        dcc.Graph(figure=fig_temp),
        dcc.Graph(figure=fig_feels),
        dcc.Graph(figure=fig_hum),
        dcc.Graph(figure=fig_pressure),
        dcc.Graph(figure=fig_wind)
    ]

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (Flask)
@server.route("/")
def index():
    return render_template_string("""
    <html>
    <head>
        <title>–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</title>
        <style>
            body {
                background: linear-gradient(to bottom, #e0f7fa, #ffffff);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                text-align: center;
                padding-top: 100px;
                color: #333;
            }
            h1 {
                font-size: 40px;
                margin-bottom: 20px;
            }
            p {
                font-size: 18px;
            }
            a {
                text-decoration: none;
                color: white;
                background-color: #00796b;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            a:hover {
                background-color: #004d40;
            }
        </style>
    </head>
    <body>
        <h1>üåç –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
        <p><a href="/dashboard/">–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—à–±–æ—Ä–¥—É</a></p>
    </body>
    </html>
    """)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    server.run(debug=True)